{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../src/compositemark/index.ts"],"names":[],"mappings":";;;AACA,kCAA6C;AAE7C,qCAA4H;AAC5H,uCAAuD;AAEvD,2EAA2E;AAC3E,uEAAuE;AACvE,0EAA0E;AAC1E,kEAAkE;AAClE,kEAAkE;AAClE,yDAAqC;AAKrC;;GAEG;AACH,IAAM,kBAAkB,GAAqC,EAAE,CAAC;AAEhE,aAAoB,IAAY,EAAE,UAA0B;IAC1D,kBAAkB,CAAC,IAAI,CAAC,GAAG,UAAU,CAAC;AACxC,CAAC;AAFD,kBAEC;AAED,gBAAuB,IAAY;IACjC,OAAO,kBAAkB,CAAC,IAAI,CAAC,CAAC;AAClC,CAAC;AAFD,wBAEC;AAQY,QAAA,qBAAqB,GAAG,OAAO,CAAC,cAAc,CAAC;AAK/C,QAAA,qDAAqD,wBAC7D,+CAAqC,EACxC;AAEF,GAAG,CAAC,iBAAO,EAAE,0BAAgB,CAAC,CAAC;AAC/B,GAAG,CAAC,mBAAQ,EAAE,4BAAiB,CAAC,CAAC;AAEjC;;GAEG;AACH;AACI,yHAAyH;AACzH,IAAmC,EACnC,MAAc;IAGhB,IAAM,IAAI,GAAG,gBAAS,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC;IAC/D,IAAM,UAAU,GAAG,kBAAkB,CAAC,IAAI,CAAC,CAAC;IAC5C,IAAI,UAAU,EAAE;QACd,OAAO,UAAU,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC;KACjC;IAED,MAAM,IAAI,KAAK,CAAC,yBAAsB,IAAI,OAAG,CAAC,CAAC;AACjD,CAAC;AAbD,8BAaC","sourcesContent":["import {Config} from './../config';\nimport {AnyMark, isMarkDef} from './../mark';\nimport {GenericUnitSpec, NormalizedLayerSpec} from './../spec';\nimport {BOXPLOT, BoxPlotConfigMixins, BoxPlotDef, normalizeBoxPlot, VL_ONLY_BOXPLOT_CONFIG_PROPERTY_INDEX} from './boxplot';\nimport {ERRORBAR, normalizeErrorBar} from './errorbar';\n\n// This package import below makes the generated .d.ts file compatible with\n// Typescript 2.7 so that libraries requiring us can use Typedoc (which\n// currently is limited to Typescript 2.7). This comment and import can be\n// removed when Typedoc is updated to Typescript 2.9 or later. See\n// https://github.com/vega/vega-lite/issues/3862 for more details.\nimport * as boxplot from './boxplot';\n\nexport {BoxPlotConfig} from './boxplot';\nexport type UnitNormalizer = (spec: GenericUnitSpec<any, any>, config: Config)=> NormalizedLayerSpec;\n\n/**\n * Registry index for all composite mark's normalizer\n */\nconst normalizerRegistry: {[mark: string]: UnitNormalizer} = {};\n\nexport function add(mark: string, normalizer: UnitNormalizer) {\n  normalizerRegistry[mark] = normalizer;\n}\n\nexport function remove(mark: string) {\n  delete normalizerRegistry[mark];\n}\n\nexport type CompositeMark = BOXPLOT | ERRORBAR;\n\nexport type CompositeMarkDef = BoxPlotDef;\n\nexport type CompositeAggregate = BOXPLOT;\n\nexport const COMPOSITE_MARK_STYLES = boxplot.BOXPLOT_STYLES;\nexport type CompositeMarkStyle = typeof COMPOSITE_MARK_STYLES[0];\n\nexport interface CompositeMarkConfigMixins extends BoxPlotConfigMixins {}\n\nexport const VL_ONLY_COMPOSITE_MARK_SPECIFIC_CONFIG_PROPERTY_INDEX = {\n  ...VL_ONLY_BOXPLOT_CONFIG_PROPERTY_INDEX\n};\n\nadd(BOXPLOT, normalizeBoxPlot);\nadd(ERRORBAR, normalizeErrorBar);\n\n/**\n * Transform a unit spec with composite mark into a normal layer spec.\n */\nexport function normalize(\n    // This GenericUnitSpec has any as Encoding because unit specs with composite mark can have additional encoding channels.\n    spec: GenericUnitSpec<any, AnyMark>,\n    config: Config\n  ): NormalizedLayerSpec {\n\n  const mark = isMarkDef(spec.mark) ? spec.mark.type : spec.mark;\n  const normalizer = normalizerRegistry[mark];\n  if (normalizer) {\n    return normalizer(spec, config);\n  }\n\n  throw new Error(`Invalid mark type \"${mark}\"`);\n}\n"]}