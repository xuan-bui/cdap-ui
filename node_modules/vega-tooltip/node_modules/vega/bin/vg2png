#!/usr/bin/env node
// Render a Vega specification to PNG, using node canvas

var helpText =
  'Render a Vega specification to PNG.\n\n' +
  'Usage: vg2png [vega_json_file] [output_png_file]\n' +
  '  If no arguments are provided, reads from stdin.\n' +
  '  If output_png_file is not provided, writes to stdout.\n\n' +
  'To load data, you may need to set a base directory:\n' +
  '  For web retrieval, use `-b http://host/data/`. \n' +
  '  For files, use `-b file:///dir/data/` (absolute) or `-b data/` (relative).';

// import required libraries
var path = require('path'),
    fs = require('fs'),
    lcg = require('./lcg'),
    vega = require('../');

// arguments
var args = require('yargs')
  .usage(helpText)
  .demand(0)
  .string('b')
    .alias('b', 'base')
    .describe('b', 'Base directory for data loading.')
  .number('s')
    .alias('s', 'scale')
    .default('s', 1)
    .describe('s', 'Output resolution scale factor.')
  .number('seed')
    .describe('seed', 'Seed for random number generation.')
  .help()
  .version()
  .argv;

// set baseURL if provided on command line
var base = args.b ? args.b + path.sep : null;

// Plug-in a deterministic random number generator for testing.
if (typeof args.seed !== 'undefined') {
  if (isNaN(args.seed)) throw 'Illegal seed value: must be a valid number.';
  vega.setRandom(lcg(args.seed));
}

// input / output files
var specFile = args._[0] || '/dev/stdin',
    outputFile = args._[1] || null;

// load spec, render to png
fs.readFile(specFile, 'utf8', function(err, text) {
  if (err) throw err;
  render(JSON.parse(text));
});

// ---

function writePNG(canvas, file) {
  var out = file ? fs.createWriteStream(file) : process.stdout;
  var stream = canvas.createPNGStream();
  stream.on('data', function(chunk) { out.write(chunk); });
}

function render(spec) {
  new vega.View(vega.parse(spec), {
      loader: vega.loader({baseURL: base}),
      logLevel: vega.Warn,
      renderer: 'none'
    })
    .initialize()
    .toCanvas(args.s)
    .then(function(canvas) { writePNG(canvas, outputFile); })
    .catch(function(err) { console.error(err); });
}